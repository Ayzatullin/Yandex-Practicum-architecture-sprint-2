services:
  pymongo_api:
    container_name: pymongo_api
    build:
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
      - configSrv01
    ports:
      - 8080:8080
    networks:
      app-network:
        ipv4_address: 173.17.0.5
    environment:
      MONGODB_URL: "mongodb://mongos_router:27020"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis:6379"


  #сервер конфигурации
  configSrv01:
    image: mongo:latest # docker образ
    container_name: configSrv01
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.6
    volumes:
      - config-data:/data/db
      - ./scripts:/scripts
    command: [ "--configsvr", "--replSet", "config_server", "--bind_ip_all", "--port", "27017" ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #1-й шард 
  shard1:
    image: mongo:latest
    container_name: shard1
    restart: always
    ports:
      - "27018:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    volumes:
      - shard1-data:/data/db
      - ./scripts:/scripts
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #2-й шард 
  shard2:
    image: mongo:latest
    container_name: shard2
    restart: always
    ports:
      - "27019:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.8
    volumes:
      - shard2-data:/data/db
      - ./scripts:/scripts
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплик
        "--bind_ip_all", #обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #//роутер
  mongos_router:
    image: mongo:latest
    container_name: mongo_router
    restart: always
    ports:
      - "27020:27020"
    volumes:
      - ./scripts:/scripts
    networks:
      app-network:
        ipv4_address: 173.17.0.9
    command:
      [
        "mongos", #обычная mongo в режиме роутера
        "--configdb",
        "config_server/configSrv01:27017", #передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # //реплика1 шарда1
  shard1_replica1:
    image: mongo:latest # docker образ
    container_name: shard1_replica1
    restart: always
    ports:
      - "27022:27022"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - shard1-replica1-data:/data/db
      - ./scripts:/scripts
    command: [ "--replSet", "shard1", "--bind_ip_all", "--port", "27022" ] #команда для создания реплики
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # //реплика2 шарда1
  shard1_replica2:
    image: mongo:latest
    container_name: shard1_replica2
    restart: always
    ports:
      - "27023:27023"
    networks:
      app-network:
        ipv4_address: 173.17.0.11
    volumes:
      - shard1-replica2-data:/data/db
      - ./scripts:/scripts
    command: [ "--replSet", "shard1", "--bind_ip_all", "--port", "27023" ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # кеширование redis
  redis:
    image: "redis:latest"
    container_name: redis
    restart: always
    ports:
      - "6379"
    volumes:
      - redis1_data:/data
      # - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server" ]
    networks:
      app-network:
        ipv4_address: 173.17.0.12



networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/18
      

volumes:
  config-data:
  shard1-data:
  shard2-data:
  shard1-replica1-data:
  shard1-replica2-data:
  redis1_data: {}
  redis2_data: {}
  redis3_data: {}
  redis4_data: {}
  redis5_data: {}
  redis6_data: {} 


