services:
  configSrv:
    image: mongo:latest
    container_name: configSrv
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - config-data:/data/db
      - ./scripts:/scripts
    command:
      [
        "--configsvr",  #запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #1-й шард
  shard1-a:
    image: mongo:latest
    container_name: shard1-a
    restart: always
    ports:
      - "27031:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.31
    volumes:
      - shard1-a-data:/data/db
      - ./scripts:/scripts
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27017"
      ]
  shard1-b:
    image: mongo:latest
    container_name: shard1-b
    restart: always
    ports:
      - "27032:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.32
    volumes:
      - shard1-b-data:/data/db
      - ./scripts:/scripts
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27017"
      ]
  shard1-c:
    image: mongo:latest
    container_name: shard1-c
    restart: always
    ports:
      - "27033:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.33
    volumes:
      - shard1-c-data:/data/db
      - ./scripts:/scripts
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27017"
      ]

  #2-й шард
  shard2-a:
    image: mongo:latest
    container_name: shard2-a
    restart: always
    ports:
      - "27041:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.41
    volumes:
      - shard2-a-data:/data/db
      - ./scripts:/scripts
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27017"
      ]
  shard2-b:
    image: mongo:latest
    container_name: shard2-b
    restart: always
    ports:
      - "27042:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.42
    volumes:
      - shard2-b-data:/data/db
      - ./scripts:/scripts
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27017"
      ]
  shard2-c:
    image: mongo:latest
    container_name: shard2-c
    restart: always
    ports:
      - "27043:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.43
    volumes:
      - shard2-c-data:/data/db
      - ./scripts:/scripts
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27017"
      ]

  #роутер
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    command:
      [
        "mongos", #обычная mongo в режиме роутера
        "--configdb",
        "config_server/configSrv:27017", #передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    volumes:
      - ./scripts:/scripts
    depends_on:
      - configSrv
      - shard1-a
      - shard1-b
      - shard1-c
      - shard2-a
      - shard2-b
      - shard2-c
    healthcheck:
      test: [ "CMD", "mongosh", "--port 27020", "--eval", "db.adminCommand('ping').ok"]
      interval: 5s
      start_period: 20s

  pymongo_api:
    container_name: pymongo_api
    build:
      context: api_app
      dockerfile: Dockerfile
    networks:
      app-network:
        ipv4_address: 173.17.0.15
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
    ports:
      - 8081:8080
    environment:
      MONGODB_URL: "mongodb://173.17.0.7:27020"
      MONGODB_DATABASE_NAME: "somedb"

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  config-data:
  shard1-a-data:
  shard1-b-data:
  shard1-c-data:
  shard2-a-data:
  shard2-b-data:
  shard2-c-data: